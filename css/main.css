/*doc
---
title: String utils
name: string
category: Sass Utils | Functions
---
*/
/*doc
---
title: str-firstCharToUpper
name: str-firstCharToUpper
parent: string
---
Capitalizes first letter of a given string. Useful as a camelCase converter.

_returns string_

```
str-firstCharToUpper('snowflake') // -> 'Snowflake'

.specialstr-firstCharToUpper("snowflake") // -> .specialSnowflake
```
*/
/*doc
---
title: str-replace
name: str-replace
parent: string
---
Search and replace on strings.

_returns string_

```
str-replace('inline-block', '-', '') // -> 'inlineblock'

.display--str-replace("inline-block", "-block", "Block") -> .display--inlineBlock
```
*/
/*doc
---
title: Contrast/brightness utils
name: brightness
category: Sass Utils | Functions
---
*/
/*doc
---
title: Perceived brightness value
name: getPerceivedBrightness
parent: brightness
---
Gets brightness of a color on a scale of 0-255 based on a yiq color space.
_Calculates green-weighted sum of RGB channels (green is perceived as brighter
on additive color screens)._

_returns int_

```
getPerceivedBrightness(#000) // -> 0
```
*/
/*doc
---
title: isDark/isLight
name: isDarkisLight
parent: brightness
---
Checks a given color for brightness and returns a boolean.
Our default dark/light threshold is 160 on a scale of 0-255

_returns boolean_

```
isDark(#000) // -> true
isLight(#000) // -> false
```
*/
/*doc
---
title: Programmatic contrast text
name: getPrimaryTextColor
parent: brightness
---
For a given background color, this function returns
a text color value with appropriate contrast.

_returns `color` value_

```
// -> color: $C_textPrimaryInverted; (white text on dark)
color: getPrimaryTextColor(#000);

// -> color: $C_textPrimary; (dark text on white)
color: getPrimaryTextColor(#FFF);
```
*/
/*doc
---
title: Browser filter mixin (IE only)
name: browserUtils
category: Sass Utils | Mixins & Placeholders
---

Targets styles to specific IE versions using
the root class method (applying classes to the
`body` tag with IE conditional comments).


```
.myClass {
	@include browser-lessThanIE( 10 ) { ...styles for all IE versions below 10... }
	@include browser-lessThanIE( 9 ) { ...styles for all IE versions below 9... }
}
```
*/
/*doc
---
title: Media Query Breakpoints
name: breakpoints
category: Sass Utils | Mixins & Placeholders
---

### Mobile first mixin
This breakpoint mixin uses a **mobile first**
strategy, meaning the `medium` breakpoint, for
example, applies to _medium screens and larger_.

```scss
	@include atMediaUp(medium) {
		body::after {
			content: "medium screens and larger can see me";
		}
	}
```

Breakpoint name      | Description
---------------------| ---------------------------------------------
`atMediaUp(small)`   | Small sreens and up
`atMediaUp(medium)`  | Landscape on most phones and up; portrait on some phablets
`atMediaUp(large)`   | Landscape on phabelts and up; portrait on most tablets or old desktops
`atMediaUp(huge)`    | Modern desktop viewports and up or [ridiculous huge tablets](http://liliputing.com/wp-content/uploads/2013/10/fox-big-tablets.jpg)

*/
/*doc
---
title: Flexbox
name: flexboxUtil
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Flex parent
name: flexParentUtil
parent: flexboxUtil
---

Sets flexbox properties for a flex parent (`display: flex;`)

```
@include flexParent('row'); // displays element as flex with children in row orientation
@include flexParent('column'); // displays element as flex with children in column orientation

@include flexParent('row', false); // optional second argument allows disabling of IE table display fallbacks
```
*/
/*doc
---
title: Flex child
name: flexChildUtil
parent: flexboxUtil
---

Sets flexbox properties for a flex children.

```
@include flexChild('grow'); // sets element to grow to fill remaining space in flex parent
@include flexChild('shrink'); // sets element to shirnk to the width of its content

@include flexChild('shrink', false); // optional second argument allows disabling of IE table display fallbacks
```
*/
/*doc
---
title: Accessibility utils
name: a11yUtil
category: Sass Utils | Mixins & Placeholders
---

Accessibility utilities based on the [a11y project](http://a11yproject.com/about.html)
*/
/*doc
---
title: a11y Visibility
name: a11yVisibilityMixin
parent: a11yUtil
---

### Hiding elements

```
@include a11yVisibility('hidden');
```

Takes element out of document flow and hides it
by clipping to a 1x1 pixel. Allows content to be
visually hidden but [available to screen readers](http://a11yproject.com/posts/how-to-hide-content/).


### Showing a11y hidden elements

```
@include a11yVisibility('visibile');
```

When applied to an element hidden with `a11yHide()`,
the element is forced to unclip and returned to the
document flow.


*/
/*doc
---
title: i18n
name: i18nHelper
category: Sass Utils | Mixins & Placeholders
---

Filter styles for specific languages using language
classes on the `body` element.

*/
/*doc
---
title: i18n-only
name: onlyLnag
parent: i18nHelper
---
To set a style rule for one language only,
use `i18n-only`.

```
@include i18n-only('en') {
	text-transform: uppercase; // only upercasse for English
}

@include i18n-only('en', 'it') { ... } // multiple languages supported
```
*/
/*doc
---
title: i18n-exclude
name: excludeLang
parent: i18nHelper
---
To ensure a style rule is __not__ applied to
a language, use `i18n-exclude`.

```
@include i18n-exclude('de') {
	text-transform: uppercase; // uppercase every language except German
}

@include i18n-exclude('ja', 'es', 'de') { ... } // multiple languages supported
```
*/
/*doc
---
title: Alignment Utilities
name: align
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Vertical-align children
name: valign
parent: align
---
Aligns children of selected element using flexbox
with a table-cell fallback for old IE.

```
@include valignChildren(center); // centers children in element
@include valignChildren(top); // positions children to top of element
@include valignChildren(bottom); // positions children to bottom of element
```
*/
/*doc
---
title: Background Utilities
name: background
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Background clip mixin
name: backgroundClip
parent: background
---
Sets background-clip property

```
@include background-clip($value: padding);
@include background-clip('border');
```
*/
/*doc
---
title: Image fill placeholder
name: imgFill
parent: background
---
Sets background properties that center
background image, set size to 'cover',
and overflow hidden.

_[ie. avatars][avatar]_

```
@extend %imgFill;
```
*/
/*doc
---
title: Button utilities
name: button
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Button personality placeholder
name: buttonPersonality
parent: button
---
Disables user-select, sets cursor, and resets text-decoration.

```
@extend %buttonPersonality;
```
*/
/*doc
---
title: Color
name: colorUtil
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: SVG color
name: svgColorMixin
parent: colorUtil
---
Sets properties to color SVG icons

```
@mixin color-svg($color: black);
```
*/
/*doc
---
title: SVG + Text color
name: colorAllMixin
parent: colorUtil
---
Sets properties to apply color to SVG icons
_and_ text.

```
@mixin color-all($color: black);
```
*/
/*doc
---
title: data uri images
name: datauri
category: Sass Utils | Mixins & Placeholders
---
Sassquatch image dependencies are stored
as data uris in a Sass map.

```
map-get($data-img-map, "orgBadge") // raw data uri

// OR

.elWithImgBackground {
	@extend %backgroundImg--orgBadge; // sets background-image property
}
```

Img Name            | Description
------------------- | ----------------------------
`orgBadge`          | Organizer badge
`launcher`          | Form launcher input icon

*/
/*doc
---
title: Display utils
name: display
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Pseudo-element display mixin
name: pseudoDisplay
parent: display
---
Sets display property for psuedo-elements

```
@include pseudoDisplay($value: block);
```
*/
/*doc
---
title: Float utils
name: float
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Clearfix placeholder
name: clearfix
parent: float
---
Clears floated children.

```
@extend %clearfix;
```
*/
/*doc
---
title: Modal mixins
name: modalUtils
category: Sass Utils | Mixins & Placeholders
---

Description here

*/
/*doc
---
title: Modal Dialog Mixin
parent: modalUtils
---

Use this mixin to get the behavior of a [Snap Modal View][snapModalView],
a view that snaps to full page on small screens and a dialog on larger formats.

```
	@include modal-dialog;

```
*/
/*doc
---
title: Modal Full Mixin
parent: modalUtils
---

Use this mixin to get behavior of a full page modal.
See [the Full Modal View documentation][fullModalView]

```
	@include modal-full;

```
*/
/*doc
---
title: Shadow utilities
name: shadow
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Shadow placeholder
name: shadowPlaceholder
parent: shadow
---
Applies standard box-shadow

```
@extend %shadow;
```
*/
/*doc
---
title: Shapes
name: shape
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Circle mixin
name: circleMixin
parent: shape
---
Makes selected element a circle with border-radius

```
@mixin circle($color: black, $size: 12px)
```
*/
/*doc
---
title: Text utils
name: text
category: Sass Utils | Mixins & Placeholders
---
*/
/*doc
---
title: Link color
name: linkColorPlaceholder
parent: text
---
Forces an element to use link-like styling.

```
@extend %link;
```
*/
/*doc
---
title: Text wrap
name: textWrapUtil
parent: text
---
Nice hyphenation and wrapping for running text.

```
@extend %link;
```
*/
/*doc
---
title: Text protection shim
name: textProtection
parent: text
---
Adds a pseudo-element gradient

```
@mixin textProtectionScrim($placement: 'top'); // 'bottom' will place gradent on bottom of el
```
*/
body {
  background: #f7fcfe; }

.text--headingPrimary {
  font-size: 22px;
  font-weight: 700; }
  @media only screen and (min-width: 440px) {
    .text--headingPrimary {
      font-size: 30px; } }

@media only screen and (min-width: 440px) {
  .text--heading {
    font-size: 22px; } }

.text--pullQuote {
  font-size: 22px; }

.text--number {
  color: #d55741;
  font-weight: 300; }

.link {
  color: #3987cb; }

p {
  max-width: 40em; }

.latestEp-card {
  background-color: #273830; }
  .latestEp-card figcaption {
    background: white;
    margin: -24px 16px 16px 8px;
    padding: 16px; }

.latestEp-img {
  width: 100%; }

/*# sourceMappingURL=main.css.map */

body{background:#f7fcfe}.text--headingPrimary{font-size:22px;font-weight:700}@media only screen and (min-width:440px){.text--headingPrimary{font-size:30px}.text--heading{font-size:22px}}.text--pullQuote{font-size:22px}.text--number{color:#d55741;font-weight:300}.link{color:#3987cb}p{max-width:40em}.latestEp-card{background-color:#273830}.latestEp-card figcaption{background:#fff;margin:-24px 16px 16px 8px;padding:16px}.latestEp-img{width:100%}